;;;omg

# === Instruction Set ===
# Each instruction is a 1- or 2-element list: ["op", operand?]
alloc program := [
    ["push", 10],
    ["push", 5],
    ["mul"],
    ["push", 50],
    ["add"],
    ["emit_top"],
    ["push", 50],
    ["sub"],
    ["push", 2],
    ["div"],
    ["emit_top"]
]

# === VM State ===
alloc stack := []
alloc ptr := 0
alloc instruction := false

# === VM Loop ===
loop ptr < length(program) {
    instruction := program[ptr]
    ptr := ptr + 1

    # Parse opcode and operand
    alloc op := instruction[0]

    # Handle PUSH
    if op == "push" {
        alloc value := instruction[1]
        stack := stack + [value]
    } elif op == "pop" {
        alloc _ := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
    } elif op == "add" {
        alloc b := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        alloc a := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        stack := stack + [a + b]
    } elif op == "sub" {
        alloc b := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        alloc a := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        stack := stack + [a - b]
    } elif op == "mul" {
        alloc b := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        alloc a := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        stack := stack + [a * b]
    } elif op == "div" {
        alloc b := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        alloc a := stack[length(stack) - 1]
        stack := stack[0:length(stack) - 1]
        stack := stack + [a / b]
    } elif op == "emit_top" {
        alloc top := stack[length(stack) - 1]
        emit top
    } else {
        emit "Unknown instruction: " + op
    }
}
