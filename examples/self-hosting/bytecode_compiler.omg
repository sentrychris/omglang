;;;omg

# Minimal OMG bytecode compiler for demonstration.
# Supports variable assignment, addition and emitting values.

proc starts_with(text, prefix) {
    alloc plen := length(prefix)
    return text[0:plen] == prefix
}

proc index(text, needle) {
    alloc nlen := length(needle)
    alloc i := 0
    loop i + nlen <= length(text) {
        if text[i:i+nlen] == needle {
            return i
        }
        i := i + 1
    }
    return -1
}

proc trim(text) {
    alloc i := 0
    alloc j := length(text)
    loop i < j and text[i:i+1] == " " {
        i := i + 1
    }
    loop j > i and text[j-1:j] == " " {
        j := j - 1
    }
    return text[i:j]
}

proc compile_operand(token) {
    token := trim(token)
    if length(token) > 1 and token[0:1] == "\"" and token[length(token)-1:length(token)] == "\"" {
        emit "PUSH_STR " + token[1:length(token)-1]
    } else {
        alloc first := token[0:1]
        if (first >= "0" and first <= "9") or first == "-" {
            emit "PUSH_INT " + token
        } else {
            emit "LOAD " + token
        }
    }
}

proc compile_line(line) {
    line := trim(line)
    if length(line) == 0 or starts_with(line, ";;;") {
        return 0
    }
    if starts_with(line, "emit ") {
        compile_operand(line[5:length(line)])
        emit "EMIT"
        return 0
    }
    alloc assign := index(line, ":=")
    if assign != -1 {
        alloc name := trim(line[0:assign])
        alloc expr := trim(line[assign+2:length(line)])
        alloc plus := index(expr, "+")
        if plus != -1 {
            compile_operand(expr[0:plus])
            compile_operand(expr[plus+1:length(expr)])
            emit "ADD"
        } else {
            compile_operand(expr)
        }
        emit "STORE " + name
    }
}

proc run_file_with_args(args) {
    alloc path := args[0]
    alloc src := read_file(path)
    alloc line := ""
    alloc idx := 0
    alloc ch := ""
    loop idx < length(src) {
        ch := src[idx:idx+1]
        if ch == "\n" {
            compile_line(line)
            line := ""
        } else {
            line := line + ch
        }
        idx := idx + 1
    }
    compile_line(line)
    emit "HALT"
}

if length(args) > 0 {
    run_file_with_args(args)
}

