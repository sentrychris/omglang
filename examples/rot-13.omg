;;;omg

# Generate alphabet
® alphabet() {
    io i := 0
    io result := []
    ⊕ i < 26 {
        result := result + [chr(65 + i)]
        i := i + 1
    }
    ⋉ result
}

# Shift the list by n positions
® shift(a_list, n) {
    io i := 0
    io result := []
    io len := length(a_list)
    ⊕ i < len {
        io shifted := a_list[(i + n) % len]
        result := result + [shifted]
        i := i + 1
    }
    ⋉ result
}

# Generate Tabula Recta (list of 26 shifted alphabets)
® tabula_recta() {
    io i := 0
    io base := alphabet()
    io result := []
    ⊕ i < 26 {
        result := result + [shift(base, i)]
        i := i + 1
    }
    ⋉ result
}

# Perform ROT-13 using tabula recta and return joined string
® rot13(input) {
    io base := alphabet()
    io table := tabula_recta()
    io i := 0
    io result := ""  # use string instead of list
    ⊕ i < length(input) {
        io c := input[i]
        io j := 0
        io found := false
        io index := 0

        ⊕ j < length(base) {
            ⨇ base[j] == c {
                found := true
                index := j
                j := length(base)
            } ∵ {
                j := j + 1
            }
        }

        ⨇ found {
            io rot := table[13]
            result := result + rot[index]
        } ∵ {
            result := result + c
        }

        i := i + 1
    }
    ⋉ result
}

# Entry point
io message := ["H", "E", "L", "L", "O"]
io encoded := rot13(message)
ɀ ¬¬ encoded
