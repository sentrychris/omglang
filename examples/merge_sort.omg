;;;omg

# Merge sort implementation using recursion and list manipulation

proc merge(left, right) {
    alloc result := []
    alloc i := 0
    alloc j := 0
    loop i < length(left) and j < length(right) {
        if left[i] <= right[j] {
            result := result + [left[i]]
            i := i + 1
        } else {
            result := result + [right[j]]
            j := j + 1
        }
    }
    loop i < length(left) {
        result := result + [left[i]]
        i := i + 1
    }
    loop j < length(right) {
        result := result + [right[j]]
        j := j + 1
    }
    return result
}

proc merge_sort(xs) {
    if length(xs) <= 1 {
        return xs
    }
    alloc mid := length(xs) / 2
    alloc left := xs[0:mid]
    alloc right := xs[mid:length(xs)]
    alloc sorted_left := merge_sort(left)
    alloc sorted_right := merge_sort(right)
    return merge(sorted_left, sorted_right)
}

alloc arr := [5, 2, 9, 1, 5, 6]
alloc sorted := merge_sort(arr)
emit sorted