;;;omg

# Complex control flow structure
io x := 5
⨇ x == 4 {
    ɀ ¬¬ "x is 4"
} ∴ x == 5 {
    ɀ ¬¬ "x is 5"
} ∴ x == 6 {
    ɀ ¬¬ "x is 6"
} ∵ {
    ɀ ¬¬ "x is something else"
}

# Primality check using trial division
® is_prime(n) {
    ⨇ n <= 1 {
        ⋉ 0
    }
    io i := 2
    ⊕ i * i <= n {
        ⨇ n % i == 0 {
            ⋉ 0
        }
        i := i + 1
    }
    ⋉ 1
}

# Digit sum of a number
® digit_sum(n) {
    io sum := 0
    io temp := n
    ⊕ temp > 0 {
        sum := sum + (temp % 10)
        temp := temp / 10
    }
    ⋉ sum
}

# Primality, odd/even, and digit sum
® classify_number(n) {
    io isprime := is_prime(n)
    io dsum := digit_sum(n)

    ⨇ isprime == 1 {
        ⋉ "is prime, sum of digits is " + dsum
    } ∴ n % 2 == 0 {
        ⋉ "is even, sum of digits is " + dsum
    } ∵ {
        ⋉ "is odd, sum of digits is " + dsum
    }
}

# Deep recursive Fibonacci function
® fibonacci(n) {
    ⨇ n <= 1 {
        ⋉ n
    } ∵ {
        ⋉ fibonacci(n - 1) + fibonacci(n - 2)
    }
}

# Loop over numbers and rate them, including Fibonacci calculation
io idx := 10
io max := 20
io fnum := 2

⊕ idx <= max {
    ɀ ¬¬ "Classified number " + idx + " " + classify_number(idx)
    ɀ ¬¬ "Fibonacci sequence[" + fnum + "] = " + fibonacci(fnum)
    idx := idx + 1
    fnum := fnum + 2
}

# Assert primality of 97 for validation
facts is_prime(97)
ɀ ¬¬ "hell yeah"
# Will throw an AssertionFailure as expected
ɀ ¬¬ "96 is not prime"
facts is_prime(96)
