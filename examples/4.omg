;;;omg

# Complex control flow structure
thingy x := 5
maybe x == 4 {
    saywhat << "x is 4"
} oractually x == 5 {
    saywhat << "x is 5"
} oractually x == 6 {
    saywhat << "x is 6"
} okthen {
    saywhat << "x is something else"
}

# Primality check using trial division
bitchin is_prime(n) {
    maybe n <= 1 {
        gimme 0
    }

    thingy i := 2
    roundabout i * i <= n {
        maybe n % i == 0 {
            gimme 0
        }
        i := i + 1
    }

    gimme 1
}

# Digit sum of a number
bitchin digit_sum(n) {
    thingy sum := 0
    thingy temp := n
    roundabout temp > 0 {
        sum := sum + (temp % 10)
        temp := temp / 10
    }
    gimme sum
}

# Obfuscated strength rating based on digit sum and primality
bitchin classify_number(n) {
    thingy isprime := is_prime(n)
    thingy dsum := digit_sum(n)

    maybe isprime == 1 {
        gimme "is prime, sum of digits is " + dsum
    } oractually n % 2 == 0 {
        gimme "is even, sum of digits is " + dsum
    } okthen {
        gimme "is odd, sum of digits is " + dsum
    }
}

# Deep recursive Fibonacci function
bitchin fibonacci(n) {
    maybe n <= 1 {
        gimme n
    } okthen {
        gimme fibonacci(n - 1) + fibonacci(n - 2)
    }
}

# Loop over numbers and rate them, including Fibonacci calculation
thingy start := 10
thingy stop := 20
thingy current := start
thingy fibint := 2

roundabout current <= stop {
    saywhat << "Classified number " + current + " " + classify_number(current)
    saywhat << "Fibonacci sequence[" + fibint + "] = " + fibonacci(fibint)
    current := current + 1
    fibint := fibint + 2
}

# Assert primality of 97 for validation
facts is_prime(97)
