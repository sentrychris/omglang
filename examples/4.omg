;;;omg

# Complex control flow structure
alloc x := 5
if x == 4 {
    emit "x is 4"
} elif x == 5 {
    emit "x is 5"
} elif x == 6 {
    emit "x is 6"
} else {
    emit "x is something else"
}

# Primality check using trial division
proc is_prime(n) {
    if n <= 1 {
        return 0
    }
    alloc i := 2
    loop i * i <= n {
        if n % i == 0 {
            return 0
        }
        i := i + 1
    }
    return 1
}

# Digit sum of a number
proc digit_sum(n) {
    alloc sum := 0
    alloc temp := n
    loop temp > 0 {
        sum := sum + (temp % 10)
        temp := temp / 10
    }
    return sum
}

# Primality, odd/even, and digit sum
proc classify_number(n) {
    alloc isprime := is_prime(n)
    alloc dsum := digit_sum(n)

    if isprime == 1 {
        return "is prime, sum of digits is " + dsum
    } elif n % 2 == 0 {
        return "is even, sum of digits is " + dsum
    } else {
        return "is odd, sum of digits is " + dsum
    }
}

# Deep recursive Fibonacci function
proc fibonacci(n) {
    if n <= 1 {
        return n
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2)
    }
}

# Loop over numbers and rate them, including Fibonacci calculation
alloc idx := 10
alloc max := 20
alloc fnum := 2

loop idx <= max {
    emit "Classified number " + idx + " " + classify_number(idx)
    emit "Fibonacci sequence[" + fnum + "] = " + fibonacci(fnum)
    idx := idx + 1
    fnum := fnum + 2
}

# Assert primality of 97 for validation
facts is_prime(97)
emit "97 is prime"
# Will throw an AssertionFailure as expected
emit "96 is not prime"
facts is_prime(96)
