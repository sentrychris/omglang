{
  "scopeName": "source.omg",
  "name": "OMG Language",
  "patterns": [
    { "include": "#import-statements" },
    { "include": "#namespace-access" },
    { "include": "#function-definitions" },
    { "include": "#function-calls" },
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#booleans" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.header.omg",
          "match": "^\\s*;;;omg\\s*$"
        },
        {
          "name": "comment.line.number-sign.omg",
          "match": "#.*$"
        }
      ]
    },
    "import-statements": {
      "patterns": [
        {
          "name": "meta.import.omg",
          "begin": "\\bimport\\b",
          "beginCaptures": {
            "0": { "name": "keyword.control.omg" }
          },
          "end": "$",
          "patterns": [
            {
              "name": "string.quoted.path.omg",
              "match": "\"[^\"]+\""
            },
            {
              "name": "keyword.control.omg",
              "match": "\\bas\\b"
            },
            {
              "name": "entity.name.class.omg",
              "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
            }
          ]
        }
      ]
    },
    "namespace-access": {
      "patterns": [
        {
          "name": "meta.namespace.access.omg",
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\.)",
          "captures": {
            "1": { "name": "entity.name.class" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.omg",
          "match": "\\b(import|as|alloc|emit|facts|proc|return|if|elif|else|loop|and|or)\\b"
        }
      ]
    },
    "booleans": {
      "patterns": [
        { "name": "constant.language.boolean.omg", "match": "\\b(true|false)\\b" }
      ]
    },
    "function-definitions": {
      "patterns": [
        {
          "name": "meta.function.definition.omg",
          "begin": "\\b(proc)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": { "name": "keyword.control.omg" },
            "2": { "name": "entity.name.function.omg" }
          },
          "end": "\\)",
          "patterns": [
            { "name": "variable.parameter.omg", "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b" },
            { "match": ",", "name": "punctuation.separator.parameter.omg" }
          ]
        }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function.call.omg",
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": { "1": { "name": "entity.name.function.omg" } }
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.omg",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            { "match": "\\\\.", "name": "constant.character.escape.omg" }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.integer.omg", "match": "\\b\\d+\\b" }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.omg",
          "match": "(==|!=|<=|>=|<<|>>|[:+\\-*/%<>=&|^~])"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.omg",
          "match": "\\b(?!alloc\\b|emit\\b|facts\\b|proc\\b|return\\b|if\\b|elif\\b|else\\b|loop\\b|and\\b|or\\b|true\\b|false\\b|import\\b|as\\b)[A-Za-z_][A-Za-z0-9_]*\\b"
        }
      ]
    }
  }
}
